<<<<<<< HEAD
#
# Module manifest for module 'XKCDPasswordGenerator'
#
# Generated by: Pavel Ryzhkov
#
# Generated on: 11/27/2024
#

@{

# Script module or binary module file associated with this manifest.
# RootModule = ''

# Version number of this module.
ModuleVersion = '0.0.1'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '12430b53-df50-42e8-b543-a0aab9c14903'

# Author of this module
Author = 'Pavel Ryzhkov'

# Company or vendor of this module
# CompanyName = 'Unknown'

# Copyright statement for this module
Copyright = '(c) pavel. All rights reserved.'

# Description of the functionality provided by this module
Description = 'A PowerShell module for generating memorable XKCD-style passwords.'

# Minimum version of the PowerShell engine required by this module
PowerShellVersion = '5.1'

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# ClrVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @()

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @("Password", "Generator", "XKCD", "PowerShell")

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = 'https://github.com/pavelryzhkov/XKCDPasswordGenerator'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

        # Prerelease string of this module
        # Prerelease = ''

        # Flag to indicate whether the module requires explicit user acceptance for install/update/save
        # RequireLicenseAcceptance = $false

        # External dependent modules of this module
        # ExternalModuleDependencies = @()

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

=======
<#
.SYNOPSIS
Generates XKCD-style memorable passwords.

.DESCRIPTION
The `Get-XKCDPassword` function generates easy-to-remember passwords consisting of random words separated by a specified delimiter.
Each password ends with a two-digit number (from 1 to 99).

.PARAMETER MinimalWordsCount
The minimum number of words in the password. Default: 2.

.PARAMETER MinimalCharactersCount
The minimum length of the password, including delimiters and the number. Default: 10.

.PARAMETER Delimiter
The character(s) used to separate words in the password. Default: "-".

.PARAMETER List
The number of passwords to generate. Default: 1.

.EXAMPLE
# Generate a single password with default settings:
Get-XKCDPassword

.EXAMPLE
# Generate 5 passwords with at least 3 words, a minimum length of 15 characters, and "_" as the delimiter:
Get-XKCDPassword -MinimalWordsCount 3 -MinimalCharactersCount 15 -Delimiter "_" -List 5

.EXAMPLE
# Generate a single password with a custom delimiter and word count:
Get-XKCDPassword -MinimalWordsCount 4 -Delimiter "."

.NOTES
Author: Your Name
Date: November 2024
Version: 1.0

#>

function Get-XKCDPassword {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [ValidateRange(1, [int]::MaxValue)]
        [int]$MinimalWordsCount = 2,

        [Parameter(Mandatory = $false)]
        [ValidateRange(1, [int]::MaxValue)]
        [int]$MinimalCharactersCount = 10,

        [Parameter(Mandatory = $false)]
        [string]$Delimiter = "-",

        [Parameter(Mandatory = $false)]
        [ValidateRange(1, [int]::MaxValue)]
        [int]$List = 1
    )

    # Large offline word list for generating passwords (expandable)
    $WordList = @(
        "apple", "orange", "banana", "grape", "pear", "peach", "melon", "kiwi",
        "pineapple", "mango", "cherry", "strawberry", "blueberry", "raspberry",
        "cloud", "mountain", "river", "forest", "ocean", "desert", "valley",
        "sunshine", "rainbow", "storm", "thunder", "lightning", "snowflake",
        "correct", "horse", "battery", "staple", "random", "keyboard",
        # Add more words as needed...
        "moonlight", "starfish", "galaxy"
    )

    # Validate input parameters
    if ($MinimalWordsCount -lt 1) {
        throw [System.ArgumentException]::new("Error: MinimalWordsCount cannot be less than 1.")
    }
    if ($MinimalCharactersCount -lt 1) {
        throw [System.ArgumentException]::new("Error: MinimalCharactersCount cannot be less than 1.")
    }
    if ($List -lt 1) {
        throw [System.ArgumentException]::new("Error: List cannot be less than 1.")
    }

    # Function to generate a single password
    function GeneratePassword {
        do {
            # Select random words
            $SelectedWords = @()
            for ($i = 1; $i -le $MinimalWordsCount; $i++) {
                # Capitalize the first letter of each word
                $Word = $WordList | Get-Random
                $SelectedWords += ($Word.Substring(0, 1).ToUpper() + $Word.Substring(1))
            }

            # Form the base of the password
            $PasswordBase = ($SelectedWords -join $Delimiter)
            $PasswordLength = $PasswordBase.Length

        } while ($PasswordLength -lt ($MinimalCharactersCount - 3)) # Account for delimiter and number length

        # Add a two-digit number at the end (from 1 to 99)
        $RandomNumber = Get-Random -Minimum 1 -Maximum 100
        return "$PasswordBase$Delimiter$RandomNumber"
    }

    # Generate the specified number of passwords
    try {
        for ($i = 1; $i -le $List; $i++) {
            Write-Output (GeneratePassword)
        }
    } catch {
        Write-Error $_.Exception.Message
    }
}
>>>>>>> 1bfeab6 (Initial commit: Added XKCDPasswordGenerator.psm1)
